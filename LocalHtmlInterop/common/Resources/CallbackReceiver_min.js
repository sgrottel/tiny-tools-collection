class CallbackReceiver { #a; #b; #c; #d; #e; #f; constructor(t, s) { this.#a = t, this.#d = 0, this.#e = null, this.#f = null, this.#c = new WebSocket(`ws://127.0.0.1:${s}/`), this.#c.onopen = t => { let s = this; this.#b = setTimeout(function () { s.#g() }, 1e3) }, this.#c.onclose = t => { this.close() }, this.#c.onerror = t => { null === this.#e && this.#h({ status: "error", output: t.data }), this.close() }, this.#c.onmessage = t => { try { let s = JSON.parse(t.data); if (this.#d++, "unknown" === s.status && this.#d < 10 || "pending" === s.status) { let e = this; this.#b = setTimeout(function () { e.#g() }, 1e3); return } this.#h(s) } catch (l) { this.#h({ status: "error", output: "Unexpected non-json data received: " + t.data }) } this.close() } } close() { if (0 !== this.#b && (clearTimeout(this.#b), this.#b = 0), null !== this.#c) { let t = this.#c; this.#c = null, t.close() } null === this.#e && this.#h({ status: "error", output: "No data received" }) } #g() { this.#c && this.#c.send(`reqCallback:${this.#a}`) } #h(t) { this.#e = t, this.#f && this.#e && this.#f(this.#e) } setOnResultCallback(t) { this.#f = t, this.#f && this.#e && this.#f(this.#e) } };
